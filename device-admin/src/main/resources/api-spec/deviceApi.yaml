openapi: 3.0.4
info:
  title: Devices API - OpenAPI 3.0
  description: |-
    This is a rest API for mantaining a database of devices
  version: 1.0.0
paths:

  /device/{deviceId}:
    get:
      tags:
        - device
      summary: Find a device by Id.
      description: Find a device by Id.
      operationId: getDeviceById
      parameters:
        - name: deviceId
          in: path
          description: ID of the device to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - device
      summary: Deletes a device.
      description: Delete a device.
      operationId: deleteDeviceById
      parameters:
        - name: deviceId
          in: path
          description: Device id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: device deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /device/findAll:
    get:
      tags:
        - device
      summary: Finds All registered devices.
      description: Finds All registered devices
      operationId: findAll
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /device:
    put:
      tags:
        - device
      summary: Update an existing device.
      description: Update an existing device.
      operationId: updateDevice
      requestBody:
        description: Update an existing device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags:
        - device
      summary: Add a new device
      description: Add a new device
      operationId: addDevice
      requestBody:
        description: Create a device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /device/findByBrand/{brandName}:
    get:
      tags:
        - device
      summary: Finds the devices by brand name.
      description: Multiple brands can be provided with comma separated strings. example brand1,brand2,brand3
      operationId: findByBrand
      parameters:
        - name: brandName
          in: path
          description: brands to filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '400':
          description: Invalid filter input value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /device/findByState/{state}:
    get:
      tags:
        - device
      summary: Finds the devices by state.
      operationId: findByState
      parameters:
        - name: state
          in: path
          description: state to filter
          required: true
          schema:
            type: string
            enum:
              - available
              - in-use
              - inactive
              - in-process
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '400':
          description: Invalid filter input value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Device:
      required:
        - id
        - name
        - brand
        - state
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        brand:
          type: string
        state:
          type: string
          enum:
            - available
            - in-use
            - inactive
            - in-process
        creationTime:
          type: string
          format: date-time
        action:
          type: string
        message:
          type: array
          items:
            type: string

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string



    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
